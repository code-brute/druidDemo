server:
  port: 8080

logging:
  level:
    org.springframework: INFO
    com.example: DEBUG

spring:
  profiles:
    active: dev
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
#    这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3307/atrm?characterEncoding=UTF-8
    username: root
    password: root
    #初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
    initialSize: 5
    # 连接池中最小的空闲的连接数，低于这个数量会被创建新的连接（默认为0，调整为5，该参数越接近maxIdle，性能越>好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大，因为在机器很空闲的时候，也会创建低于minidle个数的连接，类似于jvm>参数中的Xmn设置）
    minIdle: 5

    #最大连接池数量
    maxActive: 20
    #获取连接时最大等待时间，单位毫秒。配置了maxWait之后，
#     缺省启用公平锁，并发效率会有所下降，
#     如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
    maxWait: 60000
#是否缓存preparedStatement，也就是PSCache。
#PSCache对支持游标的数据库性能提升巨大，比如说oracle。
#在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。
#作者在5.5版本中使用PSCache，通过监控界面发现PSCache有缓存命中率记录，
#该应该是支持PSCache。
    poolPreparedStatements: true
#
#要启用PSCache，必须配置大于0，当大于0时，
#poolPreparedStatements自动触发修改为true。
#在Druid中，不会存在Oracle下PSCache占用内存过多的问题，
#可以把这个数值配置大一些，比如说100
    maxOpenPreparedStatements: 2
 #验证连接是否可用sql
# 用来检测连接是否有效的sql，要求是一个查询语句。
# 如果validationQuery为null，testOnBorrow、testOnReturn、
# testWhileIdle都不会其作用。
    validationQuery: SELECT 1 FROM DUAL

#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
    testOnBorrow: false
#    归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
    testOnReturn: false
#	建议配置为true，不影响性能，并且保证安全性。
#申请连接的时候检测，如果空闲时间大于
#timeBetweenEvictionRunsMillis，
#执行validationQuery检测连接是否有效。
    testWhileIdle: true

    #	有两个含义：
#     1) Destroy线程会检测连接的间隔时间
#     2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
    timeBetweenEvictionRunsMillis: 60000

    minEvictableIdleTimeMillis: 300000
#属性类型是字符串，通过别名的方式配置扩展插件，
#常用的插件有：
#监控统计用的filter:stat
#日志用的filter:log4j
#防御sql注入的filter:wall
    filters: stat,wall,log4j

#    物理连接初始化的时候执行的sql connectionInitSqls
#    exceptionSorter  当数据库抛出一些不可恢复的异常时，抛弃连接
#    proxyFilters  类型是List<com.alibaba.druid.filter.Filter>，  如果同时配置了filters和proxyFilters，